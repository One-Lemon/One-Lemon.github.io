<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>node 基础模块</title>
      <link href="/2019/05/20/node-js/"/>
      <url>/2019/05/20/node-js/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-运行-js文件（PS：安装好了node）"><a href="#Node-运行-js文件（PS：安装好了node）" class="headerlink" title="Node 运行 js文件（PS：安装好了node）"></a>Node 运行 js文件（PS：安装好了node）</h2><ul><li>在vscode中随便写一段js代码</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mr的x的值为：'</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>在vscode中打开终端</li></ul><pre class=" language-powershell"><code class="language-powershell">node <span class="token punctuation">.</span><span class="token operator">/</span>mr<span class="token punctuation">.</span>js</code></pre><h2 id="fs模块使用"><a href="#fs模块使用" class="headerlink" title="fs模块使用"></a>fs模块使用</h2><ol><li><p>在JS文件中先引入模块 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>使用模块中的方法</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./test.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果存在异常，报错</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//正常执行输出内容</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><ul><li><p>bug1：cannot find module    注意路径</p></li><li><p>bug2：乱码    输出内容忘记添加toString方法</p></li></ul><h2 id="http模块的使用"><a href="#http模块的使用" class="headerlink" title="http模块的使用"></a>http模块的使用</h2></li><li><p>在JS文件中引入模块（这一步是万年不变的，）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建服务以及逻辑（server中可以更根据不同的需求进行逻辑判断）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//终端中打印出地址 favicon.icon忽略</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//页面中输出</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结束</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">lister</span><span class="token punctuation">(</span><span class="token number">4242</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自定义端口号  开启服务</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务已开启，请访问http://localhost:4242'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="express模块"><a href="#express模块" class="headerlink" title="express模块"></a>express模块</h2><blockquote><p>高度包容、快速而极简的 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> Web 框架</p><p>在http模块中如果深入使用，你会发现许多得问题，例如get和post请求的不同，文件路径的改变。</p><p>监听文件变化，修改代码自动重启服务，降低重复操作</p></blockquote><ol><li><p>使用方法还是先引入模块（省略，参考上面）</p></li><li><p>实例化对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>请求方法</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> _url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需加入url模块</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'访问量+1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_url<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取到url中的参数</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello node js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等价于res.write和res.end</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>部署静态文件托管</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4242</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//监听服务</span>console<span class="token punctuation">.</span><span class="token function">lg</span><span class="token punctuation">(</span><span class="token string">'服务开启，请访问http://localhost:4000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="输出结果（PS：参数是我在地址自己加的）"><a href="#输出结果（PS：参数是我在地址自己加的）" class="headerlink" title="输出结果（PS：参数是我在地址自己加的）"></a>输出结果（PS：参数是我在地址自己加的）</h3><p><img src="C:\Users\lemon\AppData\Roaming\Typora\typora-user-images\1558355610640.png" alt="1558355610640"></p><h3 id="node-模块的时候基本都是异曲同工，需要的是能看懂API手册"><a href="#node-模块的时候基本都是异曲同工，需要的是能看懂API手册" class="headerlink" title="node 模块的时候基本都是异曲同工，需要的是能看懂API手册"></a>node 模块的时候基本都是异曲同工，需要的是能看懂API手册</h3><h2 id="思考：app-all和app-use有什么区别"><a href="#思考：app-all和app-use有什么区别" class="headerlink" title="思考：app.all和app.use有什么区别?"></a>思考：app.all和app.use有什么区别?</h2><blockquote><p>类似于app.METHOD的路由请求 。</p><p>参数：path    路径，callback    回调函数</p></blockquote><p>结合API文档以及实际操作得出的区别</p><ul><li><p>use通常是作为中间件使用的    例：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'访问量+1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>此时可以接受匹配到/a所有的请求 /a/b也可以。<img src="C:\Users\lemon\AppData\Roaming\Typora\typora-user-images\1558357897282.png" alt="1558357897282"></p></li><li><p>all是以具体的路由    例：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'访问量+1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>可以接受/a get ，/a post 等，但是不能路由/a/b。</p></li></ul><h3 id="总结：use是中间件，可以路由以path开头的所有请求，但是all是具体的路由，无法路由下级地址的请求。"><a href="#总结：use是中间件，可以路由以path开头的所有请求，但是all是具体的路由，无法路由下级地址的请求。" class="headerlink" title="总结：use是中间件，可以路由以path开头的所有请求，但是all是具体的路由，无法路由下级地址的请求。"></a>总结：use是中间件，可以路由以path开头的所有请求，但是all是具体的路由，无法路由下级地址的请求。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/19/hello-world/"/>
      <url>/2019/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
