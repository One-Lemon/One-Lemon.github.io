<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/04/hello-world/"/>
      <url>/2020/04/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 入门知识</title>
      <link href="/2019/05/27/Vue%E5%85%A5%E9%97%A8%E5%B8%B8%E8%AF%86/"/>
      <url>/2019/05/27/Vue%E5%85%A5%E9%97%A8%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-入门知识"><a href="#Vue-入门知识" class="headerlink" title="Vue 入门知识"></a>Vue 入门知识</h1><blockquote><p>vue 是什么？</p><p>构建用户界面的渐进式框架    MVVM </p><p>原理：ObjectdefinePropety 修改属性的get，set方法，作为 vue 的核心，是通过 Observer,Dep,Watcher,Complie 四个类以及 CpompileUtil</p><p><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">vue</a> 下载地址</p></blockquote><h2 id="Vue-基础语法"><a href="#Vue-基础语法" class="headerlink" title="Vue 基础语法"></a>Vue 基础语法</h2><h3 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h3><ol><li><p>下载并且引入 Vue.js</p></li><li><p>实例化一个对象  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#box'</span>,<span class="comment">//挂载点  你需要操作的节点</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">'hello vue'</span></span><br><span class="line">    &#125;,<span class="comment">//存放的数据</span></span><br><span class="line">    methods:&#123;<span class="comment">//绑定事件的函数存放处</span></span><br><span class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>差值语法 <code></code>，可以是数据、 JS 表达式</p></li></ol><h3 id="dom元素内添加属性"><a href="#dom元素内添加属性" class="headerlink" title="dom元素内添加属性"></a>dom元素内添加属性</h3><ul><li><p>事件的绑定 <code>v-on:click = &#39;fn&#39;</code> 简写： <code>@click</code></p></li><li><p>属性的绑定 <code>v-bind:title = &#39;msg&#39;</code> 简写： <code>:title</code></p><blockquote><p>类似于 Jquery 的 attr 方法，例：你要绑定一个链接到百度，那么你可以使用 <code>:href = &#39;url&#39;</code>，然后在 Vue的实例对象中的 data 中添加 <code>url:&#39;http://www.baiducom&#39;</code></p></blockquote></li><li><p>双向绑定 <code>v-model = &#39;msg&#39;</code> \</p><blockquote><p>在挂载点中添加文本框，然后使用该绑定方法，那么 msg 的值会随着文本框的内容改变，反之，文本框的内容也会随着 msg 的值变化</p></blockquote></li><li><p>单次变化，默认绑定一次，后续数据更新不会重新改变 <code>v-once</code></p></li><li><p>解析 HTML ，使用 <code>v-html</code> =&gt; 尽量少用，防止 XSS 攻击</p></li></ul><h3 id="在-Vue-的实例中选项"><a href="#在-Vue-的实例中选项" class="headerlink" title="在 Vue 的实例中选项"></a>在 Vue 的实例中选项</h3><ul><li>el 对应的是 dom 节点 ， 还可以使用 vue 的实例对象.$mout() 设置挂载点</li><li>methods 绑定事件的方法存放处</li><li>data 存放的数据</li><li>computed =&gt; 计算属性</li><li>watch 监听器 </li></ul><p>Tips：v-cloak vue 定义的属性，能解决页面闪烁跳动的效果 </p><blockquote><p>在 css 样式中使用属性选择器来选定 v-clock 设置属性为 <code>display:none</code> </p></blockquote><h3 id="Vue常用指令-（通常以-v-开头，用在元素的标签上面，借鉴-angluar）"><a href="#Vue常用指令-（通常以-v-开头，用在元素的标签上面，借鉴-angluar）" class="headerlink" title="Vue常用指令  （通常以  v- 开头，用在元素的标签上面，借鉴 angluar）"></a>Vue常用指令  （通常以  v- 开头，用在元素的标签上面，借鉴 angluar）</h3><ul><li><p>v-if 类似于 JS 当中的判断，如果对应的属性为真时显示内容，为假时改节点都不会在 F12 中存在，控制 dom 的存在与否</p></li><li><p>v-show 和 v-if 也是能隐藏节点 但是他和 v-if 有不同的地方，首先 v-if 是通过删除和创建 dom 的方式，而 v-show 则是使用 <code>display:none</code> 控制消失和显示，控制 dom 的显示与否</p></li><li><p>v-for 循环一组数据来渲染 dom 结构</p><p>如果在 v-for 没有给循环的每一项设置一个唯一标识符，那么后续这个数据发生变化，页面重新渲染，浪费性能</p></li></ul><p>Tips：了解 v-bind:[attrname]  /  修饰符 . </p><h3 id="Vue-数据的检测"><a href="#Vue-数据的检测" class="headerlink" title="Vue 数据的检测"></a>Vue 数据的检测</h3><ul><li><p>数组：使用一些变异方法或者直接替换数据都能引起页面的更新。但是以下两个操作不会：</p><ol><li>直接根据数据下标来修改</li><li>直接修改数据的长度</li></ol><p>解决方法：使用 Vue.set 原型方法或者使用 vm.$set 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(target, index, value)；</span><br><span class="line">Vm.$<span class="keyword">set</span>(target, index, value)；</span><br></pre></td></tr></table></figure></li><li><p>对象：Vue 不能检测对象属性的添加或删除 ，添加解决方法同上 index 为 key 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.delete(target,key);<span class="comment">//删除对象属性</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express案例</title>
      <link href="/2019/05/22/express%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/05/22/express%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="通过-express-框架实现简单的小案例"><a href="#通过-express-框架实现简单的小案例" class="headerlink" title="通过 express 框架实现简单的小案例"></a>通过 express 框架实现简单的小案例</h1><h2 id="需要用到的工具"><a href="#需要用到的工具" class="headerlink" title="需要用到的工具"></a>需要用到的工具</h2><ul><li><p><a href="https://insomnia.rest/download/" target="_blank" rel="noopener">Insomnia</a> 模拟发送请求的工具</p></li><li><p><a href="https://robomongo.org/download" target="_blank" rel="noopener">Robo 3T</a> 操作 <a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">mongodb</a> 数据库的可视化工具(PS：安装数据库最后左下角不要勾选)</p></li><li><p>express 框架</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -<span class="literal">-save</span> express</span><br></pre></td></tr></table></figure></li><li><p>为了能够更好地浏览功能层次，我将文件夹的目录创建如下：</p><p><img src="/medias/images/path.png" alt="目录"></p><a id="more"></a></li></ul><h2 id="案例流程"><a href="#案例流程" class="headerlink" title="案例流程"></a>案例流程</h2><ol><li><p>创建 server.js 文件</p><ul><li><p>这里需要先了解<code>userRouter</code>和中间件</p></li><li><p>POST 请求的数据，将会在<code>req.body</code>中使用</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>); <span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express(); <span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">"./routes/user"</span>); <span class="comment">//引入分离的路由文件</span></span><br><span class="line"><span class="comment">//中间件POST请求数据以JSON输出，否则会得到undefined</span></span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(</span><br><span class="line">express.urlencoded(&#123;</span><br><span class="line">extended: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line">app.use(<span class="string">"/api"</span>, userPouter);</span><br><span class="line">app.listen(<span class="number">4444</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"服务启动成功，请访问http://localhost:4444"</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>在 routes 文件夹中创建 user.js<ul><li>分离代码，使框架更加清晰，将回调函数存放在<code>controller/userCtrl</code></li><li>访问地址是<code>http://localhost:4444/api/reg/</code>进入注册页面</li><li>如果代码不暴露，即使调用了该文件，也不能直接调用内容方法</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> UserCtrl = <span class="built_in">require</span>(<span class="string">"../controller/userCtrl"</span>);</span><br><span class="line">router.post(<span class="string">"/reg"</span>, UserCtrl.reg);</span><br><span class="line"><span class="built_in">module</span>.exports = router; <span class="comment">//暴露  用于server.js使用</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在 controller 文件夹中创建 userCtrl.js<ul><li>主要是存放不同操作的回调函数</li><li>这里需要和数据库交互，所以要引入<code>model/user</code></li><li>bcrypt 是加密模块，用于加密用户密码 <code>npm i bcrypt</code></li><li>findOne 返回的是 promise，所以使用 then()，并且根据返回的数据，如果查询到该用户名在数据库中存在的话 data 不为空，报错给前端，结束注册请求</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserModel = <span class="built_in">require</span>(<span class="string">'../model/user'</span>);</span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>);</span><br><span class="line"><span class="keyword">const</span> reg = <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;<span class="comment">//用户注册</span></span><br><span class="line">    <span class="keyword">let</span> name = req.body.username;<span class="comment">//获取用户名，和数据库进行对比</span></span><br><span class="line">    UserModel.findOne(&#123;<span class="comment">//mongodb数据库查询语句</span></span><br><span class="line">        username: name</span><br><span class="line">    &#125;).then(data)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(data)&#123;</span><br><span class="line">            res.send(&#123;<span class="attr">code</span>: <span class="number">-1</span>, <span class="attr">msg</span>: <span class="string">'用户名存在，请更换用户名'</span>&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对象的assign方法来更新对象中的password数据</span></span><br><span class="line">     <span class="keyword">let</span> body = <span class="built_in">Object</span>.assign(&#123;&#125;, req.body, &#123;</span><br><span class="line">            <span class="comment">//密码进行哈希加密</span></span><br><span class="line">            password: bcrypt.hashSync(req.body.password, <span class="number">10</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> user = <span class="keyword">new</span> UserModel(body);<span class="comment">//实例化对象</span></span><br><span class="line">        user.save().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            res.send(&#123;<span class="attr">code</span>: <span class="number">0</span>, msg&#125;)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err.message);</span><br><span class="line">            res.send(&#123;<span class="attr">code</span>: <span class="number">-1</span>,  <span class="attr">msg</span>: <span class="string">'注册失败'</span> &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>model/user.js</code>和<code>config/db.js</code> 分别是对进行表操作和数据库连接<ul><li>在<code>model/user.js</code>引入 db.js ，相当于在连接数据库基础上进行表的操作</li><li>因为某些原因，这里操作的是 user ，实际操作的是 users 表</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'../config/db'</span>);</span><br><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> dbSchema(&#123;<span class="comment">//这里是表的字段名和要求</span></span><br><span class="line">    username: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span><span class="comment">//设置用户名为必填项</span></span><br><span class="line">    &#125;，</span><br><span class="line">    password: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span><span class="comment">//设置用户名为必填项</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = db.model(<span class="string">'user'</span>, schema);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">"mongodb://localhost:27017/apple"</span>;</span><br><span class="line">mongoose</span><br><span class="line">.connect(url, &#123;</span><br><span class="line">useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"数据库连接成功"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">consolelog(<span class="string">"数据库连接失败"</span>, error.message);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = mongoose;</span><br></pre></td></tr></table></figure><hr><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><ol><li><p>在终端中输入<code>nodemon server.js</code>启动服务</p></li><li><p>在 Insomnia 中进行 POST 请求<img src="/medias/images/POST.png" alt="POST"></p></li></ol><hr><p>Tips：一个简单的用户注册就完成了，用户登录以及修改等操作也可以照葫芦画瓢，最重要还是要了解流程</p><p><a href="https://github.com/One-Lemon/express-demo" target="_blank" rel="noopener">github 案例仓库</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> express </tag>
            
            <tag> node </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node 基础模块</title>
      <link href="/2019/05/20/node-js/"/>
      <url>/2019/05/20/node-js/</url>
      
        <content type="html"><![CDATA[<h2 id="node-运行-js文件（PS：安装好了node）"><a href="#node-运行-js文件（PS：安装好了node）" class="headerlink" title="node 运行 js文件（PS：安装好了node）"></a>node 运行 js文件（PS：安装好了node）</h2><ul><li>在vscode中随便写一段js代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'mr的x的值为：'</span> + x);</span><br></pre></td></tr></table></figure><ul><li>在vscode中打开终端</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./mr.js</span><br></pre></td></tr></table></figure><h2 id="fs模块使用"><a href="#fs模块使用" class="headerlink" title="fs模块使用"></a>fs模块使用</h2><ol><li><p>在JS文件中先引入模块 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用模块中的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'./test.txt'</span>, (err, data)=&gt;&#123;</span><br><span class="line">       <span class="keyword">if</span>(err)&#123;<span class="comment">//如果存在异常，报错</span></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;<span class="comment">//正常执行输出内容</span></span><br><span class="line">           <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>bug1：cannot find module    注意路径</p></li><li><p>bug2：乱码    输出内容忘记添加toString方法</p></li></ul><h2 id="http模块的使用"><a href="#http模块的使用" class="headerlink" title="http模块的使用"></a>http模块的使用</h2></li><li><p>在JS文件中引入模块（这一步是万年不变的，）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建服务以及逻辑（server中可以更根据不同的需求进行逻辑判断）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);<span class="comment">//终端中打印出地址 favicon.icon忽略</span></span><br><span class="line">    res.write(<span class="string">'123456'</span>)；<span class="comment">//页面中输出</span></span><br><span class="line">    res.end()<span class="comment">//结束</span></span><br><span class="line">&#125;)</span><br><span class="line">server.lister(<span class="number">4242</span>);<span class="comment">//自定义端口号  开启服务</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务已开启，请访问http://localhost:4242'</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="express模块"><a href="#express模块" class="headerlink" title="express模块"></a>express模块</h2><blockquote><p>高度包容、快速而极简的 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> Web 框架</p><p>在http模块中如果深入使用，你会发现许多得问题，例如get和post请求的不同，文件路径的改变。</p><p>监听文件变化，修改代码自动重启服务，降低重复操作</p></blockquote><ol><li><p>使用方法还是先引入模块（省略，参考上面）</p></li><li><p>实例化对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure></li><li><p>请求方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">'/'</span>, (req, res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> _url = url.parse(req.url);<span class="comment">//需加入url模块</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'访问量+1'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(_url.query);<span class="comment">//获取到url中的参数</span></span><br><span class="line">    res.send(<span class="string">'hello node js'</span>);<span class="comment">//等价于res.write和res.end</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>部署静态文件托管</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/'</span>, express.static(path.resolve(__dirname,<span class="string">'./public'</span>)));</span><br><span class="line">app.listen(<span class="number">4242</span>);<span class="comment">//监听服务</span></span><br><span class="line"><span class="built_in">console</span>.lg(<span class="string">'服务开启，请访问http://localhost:4000'</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="输出结果（PS：参数是我在地址自己加的）"><a href="#输出结果（PS：参数是我在地址自己加的）" class="headerlink" title="输出结果（PS：参数是我在地址自己加的）"></a>输出结果（PS：参数是我在地址自己加的）</h3><p><img src="C:%5CUsers%5Clemon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1558355610640.png" alt="1558355610640"></p><h3 id="node-模块的时候基本都是异曲同工，需要的是能看懂API手册"><a href="#node-模块的时候基本都是异曲同工，需要的是能看懂API手册" class="headerlink" title="node 模块的时候基本都是异曲同工，需要的是能看懂API手册"></a>node 模块的时候基本都是异曲同工，需要的是能看懂API手册</h3><h2 id="思考：app-all和app-use有什么区别"><a href="#思考：app-all和app-use有什么区别" class="headerlink" title="思考：app.all和app.use有什么区别?"></a>思考：app.all和app.use有什么区别?</h2><blockquote><p>类似于app.METHOD的路由请求 。</p><p>参数：path    路径，callback    回调函数</p></blockquote><p>结合API文档以及实际操作得出的区别</p><ul><li><p>use通常是作为中间件使用的    例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/a'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'访问量+1'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时可以接受匹配到/a所有的请求 /a/b也可以。<img src="C:%5CUsers%5Clemon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1558357897282.png" alt="1558357897282"></p></li><li><p>all是以具体的路由    例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">'/a'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'访问量+1'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以接受/a get ，/a post 等，但是不能路由/a/b。</p></li></ul><h3 id="总结：use是中间件，可以路由以path开头的所有请求，但是all是具体的路由，无法路由下级地址的请求。"><a href="#总结：use是中间件，可以路由以path开头的所有请求，但是all是具体的路由，无法路由下级地址的请求。" class="headerlink" title="总结：use是中间件，可以路由以path开头的所有请求，但是all是具体的路由，无法路由下级地址的请求。"></a>总结：use是中间件，可以路由以path开头的所有请求，但是all是具体的路由，无法路由下级地址的请求。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
